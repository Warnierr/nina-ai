import os
import sys
import time
from datetime import datetime
from gpt4all import GPT4All

class NinaText:
    def __init__(self):
        print("ü§ñ Nina (mode texte) s'initialise...")
        
        # Configuration
        self.setup_directories()
        
        # √âtat de l'assistant
        self.wake_word = "nina"
        self.conversation_history = []
        
        # Charger le mod√®le IA
        self.load_model()
        
        print("‚úÖ Nina (mode texte) est pr√™te !")
        print("üí° Tapez 'nina' suivi de votre question")
        print("üí° Tapez 'nina stop' pour quitter")
        print("üí° Tapez 'aide' pour voir les commandes disponibles")
    
    def setup_directories(self):
        """Cr√©er les dossiers n√©cessaires"""
        os.makedirs("logs", exist_ok=True)
        os.makedirs("models", exist_ok=True)
    
    def load_model(self):
        """Charger le mod√®le GPT4All"""
        print("üß† Chargement du mod√®le IA...")
        try:
            # V√©rifier si le mod√®le existe
            model_path = "./models/ggml-gpt4all-j-v1.3-groovy.bin"
            if not os.path.exists(model_path):
                print("‚ö†Ô∏è  Mod√®le GPT4All non trouv√©.")
                print("üì• Pour t√©l√©charger le mod√®le (optionnel) :")
                print("   1. Cr√©ez le dossier 'models'")
                print("   2. T√©l√©chargez depuis : https://gpt4all.io/models/ggml-gpt4all-j-v1.3-groovy.bin")
                print("   3. Placez le fichier dans ./models/")
                print("")
                print("üîÑ Utilisation du mode r√©ponses simples pour l'instant...")
                self.gpt_model = None
            else:
                self.gpt_model = GPT4All("ggml-gpt4all-j-v1.3-groovy.bin", model_path="./models")
                print("‚úÖ Mod√®le GPT4All charg√© avec succ√®s")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors du chargement du mod√®le: {e}")
            print("üîÑ Utilisation du mode r√©ponses simples...")
            self.gpt_model = None
    
    def process_command(self, text):
        """Traiter la commande et g√©n√©rer une r√©ponse"""
        if not text:
            return "Vous n'avez rien √©crit. Essayez de poser une question !"
        
        # R√©ponses simples si GPT4All n'est pas disponible
        if self.gpt_model is None:
            return self.simple_responses(text)
        
        # Utiliser GPT4All si disponible
        try:
            context = f"Tu es Nina, un assistant IA fran√ßais comme Jarvis. "
            context += f"R√©ponds de mani√®re naturelle, utile et concise en fran√ßais. "
            context += f"Tu peux aider avec des questions g√©n√©rales, des calculs, des conseils, etc. "
            
            if self.conversation_history:
                context += f"Historique r√©cent: {' '.join(self.conversation_history[-2:])}"
            
            prompt = f"{context}\n\nUtilisateur: {text}\nNina:"
            
            response = self.gpt_model.generate(prompt, max_tokens=200, temp=0.7)
            
            # Nettoyer la r√©ponse
            response = response.strip()
            if response.startswith("Nina:"):
                response = response[5:].strip()
            
            return response
        except Exception as e:
            print(f"‚ùå Erreur avec le mod√®le IA: {e}")
            return self.simple_responses(text)
    
    def simple_responses(self, text):
        """R√©ponses simples mais intelligentes si GPT4All n'est pas disponible"""
        text_lower = text.lower()
        
        # Salutations
        if any(word in text_lower for word in ["bonjour", "salut", "hello", "bonsoir", "bonne nuit"]):
            import random
            salutations = [
                "Bonjour ! Je suis Nina, votre assistant IA. Comment puis-je vous aider aujourd'hui ?",
                "Salut ! Ravi de vous parler ! Que puis-je faire pour vous ?",
                "Hello ! Nina √† votre service. Qu'est-ce qui vous am√®ne ?",
                "Bonjour ! J'esp√®re que vous passez une bonne journ√©e. Comment puis-je vous assister ?"
            ]
            return random.choice(salutations)
        
        # Heure et date
        elif "heure" in text_lower:
            return f"Il est actuellement {datetime.now().strftime('%H:%M:%S')} ‚è∞"
        elif "date" in text_lower:
            from datetime import datetime
            date_str = datetime.now().strftime('%A %d %B %Y')
            return f"Nous sommes {date_str} üìÖ"
        
        # Informations sur Nina
        elif any(word in text_lower for word in ["qui es-tu", "qui √™tes-vous", "pr√©sente-toi", "qui tu es"]):
            return ("Je suis Nina, votre assistant IA vocal inspir√© de Jarvis ! ü§ñ\n"
                   "En mode texte pour l'instant, mais je peux d√©j√† :\n"
                   "‚Ä¢ R√©pondre √† vos questions\n"
                   "‚Ä¢ Faire des calculs\n"
                   "‚Ä¢ Donner des conseils\n"
                   "‚Ä¢ Raconter des blagues\n"
                   "‚Ä¢ Et bien plus encore !")
        
        # Calculs math√©matiques
        elif any(op in text_lower for op in ["calcul", "calculate", "combien", "+", "-", "*", "/", "plus", "moins", "fois", "multipli√©", "divis√©"]):
            return self.handle_math(text)
        
        # Blagues
        elif any(word in text_lower for word in ["blague", "joke", "rigole", "dr√¥le", "marrant"]):
            import random
            blagues = [
                "Pourquoi les plongeurs plongent-ils toujours en arri√®re et jamais en avant ? Parce que sinon, ils tombent dans le bateau ! üòÑ",
                "Que dit un escargot quand il croise une limace ? 'Regarde ce nudiste !' üêå",
                "Comment appelle-t-on un chat tomb√© dans un pot de peinture le jour de No√´l ? Un chat-mallow ! üé®",
                "Que dit un informaticien quand il s'ennuie ? Je me cache ! (cache = m√©moire cache) üíª",
                "Pourquoi les poissons n'aiment pas jouer au tennis ? Parce qu'ils ont peur du filet ! üêü"
            ]
            return random.choice(blagues)
        
        # Conseils
        elif any(word in text_lower for word in ["conseil", "aide-moi", "comment", "astuce", "tip"]):
            if "productif" in text_lower or "travail" in text_lower:
                return ("üí° Conseils pour √™tre plus productif :\n"
                       "‚Ä¢ Technique Pomodoro : 25min travail + 5min pause\n"
                       "‚Ä¢ √âliminez les distractions (notifications, r√©seaux sociaux)\n"
                       "‚Ä¢ Priorisez 3 t√¢ches importantes par jour\n"
                       "‚Ä¢ Prenez des vraies pauses pour recharger votre cerveau\n"
                       "‚Ä¢ Dormez 7-8h par nuit pour √™tre au top !")
            elif "sommeil" in text_lower or "dormir" in text_lower:
                return ("üò¥ Conseils pour bien dormir :\n"
                       "‚Ä¢ Pas d'√©crans 1h avant le coucher\n"
                       "‚Ä¢ Temp√©rature fra√Æche dans la chambre (18-20¬∞C)\n"
                       "‚Ä¢ Routine relaxante le soir\n"
                       "‚Ä¢ √âvitez la caf√©ine apr√®s 14h\n"
                       "‚Ä¢ Couchez-vous √† heures r√©guli√®res")
            else:
                return "Je serais ravi de vous donner des conseils ! Sur quel sujet avez-vous besoin d'aide ? (travail, sommeil, sant√©, etc.)"
        
        # √âmotions et sentiments
        elif any(word in text_lower for word in ["triste", "d√©prim√©", "mal", "difficile", "probl√®me"]):
            return ("Je comprends que vous traversez un moment difficile. üíô\n"
                   "Voici quelques suggestions :\n"
                   "‚Ä¢ Parlez √† quelqu'un de confiance\n"
                   "‚Ä¢ Prenez l'air et bougez un peu\n"
                   "‚Ä¢ Respirez profond√©ment et lentement\n"
                   "‚Ä¢ Rappelez-vous que les difficult√©s sont temporaires\n"
                   "Si √ßa persiste, n'h√©sitez pas √† consulter un professionnel.")
        
        elif any(word in text_lower for word in ["content", "heureux", "joie", "g√©nial", "super"]):
            return "C'est formidable ! üòä Je suis ravi que vous alliez bien. Votre bonne humeur est contagieuse !"
        
        # Questions philosophiques
        elif "sens de la vie" in text_lower or "pourquoi vivre" in text_lower:
            return ("ü§î Grande question philosophique ! Voici quelques pistes :\n"
                   "‚Ä¢ Cr√©er des liens significatifs avec les autres\n"
                   "‚Ä¢ Apprendre et grandir constamment\n"
                   "‚Ä¢ Contribuer positivement au monde\n"
                   "‚Ä¢ Trouver ce qui vous passionne\n"
                   "‚Ä¢ Profiter des petits bonheurs quotidiens\n"
                   "Le sens de la vie est souvent ce que vous d√©cidez d'en faire !")
        
        # Technologie et IA
        elif any(word in text_lower for word in ["intelligence artificielle", "ia", "robot", "futur", "technologie"]):
            return ("ü§ñ L'IA est fascinante ! Elle peut :\n"
                   "‚Ä¢ Aider √† r√©soudre des probl√®mes complexes\n"
                   "‚Ä¢ Automatiser des t√¢ches r√©p√©titives\n"
                   "‚Ä¢ Augmenter nos capacit√©s humaines\n"
                   "‚Ä¢ Cr√©er de nouvelles possibilit√©s\n"
                   "L'important est de l'utiliser de mani√®re √©thique et bienveillante !")
        
        # Aide
        elif "aide" in text_lower:
            return self.show_help()
        
        # Remerciements
        elif any(word in text_lower for word in ["merci", "thank you", "thanks"]):
            import random
            remerciements = [
                "De rien ! C'est un plaisir de vous aider ! üòä",
                "Je vous en prie ! N'h√©sitez pas si vous avez d'autres questions !",
                "Avec plaisir ! C'est pour √ßa que je suis l√† !",
                "Tout le plaisir est pour moi ! ü§ñ"
            ]
            return random.choice(remerciements)
        
        # Au revoir
        elif any(word in text_lower for word in ["au revoir", "bye", "√† bient√¥t", "salut"]):
            import random
            aurevoir = [
                "Au revoir ! J'esp√®re avoir pu vous aider. √Ä bient√¥t ! üëã",
                "√Ä tr√®s bient√¥t ! Passez une excellente journ√©e ! ‚òÄÔ∏è",
                "Bye ! N'h√©sitez pas √† revenir quand vous voulez ! üòä",
                "√Ä plus tard ! Prenez soin de vous ! üíô"
            ]
            return random.choice(aurevoir)
        
        # Capacit√©s
        elif any(word in text_lower for word in ["capacit√©", "que peux-tu faire", "fonctions", "talents"]):
            return ("ü§ñ Mes capacit√©s actuelles (mode simple) :\n"
                   "‚Ä¢ ‚úÖ Conversations naturelles\n"
                   "‚Ä¢ ‚úÖ Calculs math√©matiques\n"
                   "‚Ä¢ ‚úÖ Blagues et divertissement\n"
                   "‚Ä¢ ‚úÖ Conseils pratiques\n"
                   "‚Ä¢ ‚úÖ Support √©motionnel\n"
                   "‚Ä¢ ‚úÖ Informations g√©n√©rales\n"
                   "‚Ä¢ ‚úÖ Heure et date\n"
                   "\nüí° Avec GPT4All, je pourrais faire bien plus !")
        
        # Tests
        elif "test" in text_lower:
            return "Test r√©ussi ! Nina fonctionne parfaitement en mode texte. üéâ Que voulez-vous tester d'autre ?"
        
        # M√©t√©o (exemple)
        elif "m√©t√©o" in text_lower or "temps" in text_lower:
            return ("üå§Ô∏è Je ne peux pas encore acc√©der aux donn√©es m√©t√©o en temps r√©el, mais cette fonctionnalit√© peut √™tre ajout√©e !\n"
                   "En attendant, regardez par la fen√™tre ou consultez votre app m√©t√©o pr√©f√©r√©e ! üòä")
        
        # Bismillah (r√©ponse culturellement appropri√©e)
        elif "bismillah" in text_lower:
            return "Bismillah ! Que la b√©n√©diction soit avec vous. Comment puis-je vous aider aujourd'hui ? ü§≤"
        
        # Questions cr√©atives
        elif any(word in text_lower for word in ["cr√©ativit√©", "id√©e", "inspiration", "cr√©atif"]):
            return ("üí° Pour stimuler votre cr√©ativit√© :\n"
                   "‚Ä¢ Changez d'environnement de travail\n"
                   "‚Ä¢ Essayez de nouvelles exp√©riences\n"
                   "‚Ä¢ Tenez un carnet d'id√©es\n"
                   "‚Ä¢ Collaborez avec d'autres personnes\n"
                   "‚Ä¢ Prenez des pauses cr√©atives r√©guli√®res")
        
        # R√©ponse intelligente par d√©faut
        else:
            # Analyser le contenu pour une r√©ponse plus pertinente
            if "?" in text:
                return ("ü§î C'est une question int√©ressante ! En mode simple, mes r√©ponses sont limit√©es, mais voici ma r√©flexion :\n"
                       f"√Ä propos de '{text}', je pense qu'il serait utile d'explorer diff√©rents angles. "
                       f"Tapez 'aide' pour voir mes capacit√©s actuelles, ou t√©l√©chargez GPT4All pour des conversations plus approfondies !")
            else:
                return (f"J'ai bien re√ßu votre message : '{text}' üìù\n"
                       f"En mode simple, je peux r√©pondre aux salutations, calculs, blagues, conseils, etc.\n"
                       f"Tapez 'aide' pour voir tout ce que je peux faire, ou essayez 'nina raconte une blague' !")
    
    def handle_math(self, text):
        """G√©rer les calculs math√©matiques"""
        import re
        
        # Nettoyer le texte pour extraire l'expression math√©matique
        text_clean = text.lower().replace("nina", "").replace("calcule", "").replace("combien fait", "").replace("combien", "").strip()
        
        # Remplacer les mots par des symboles
        text_clean = text_clean.replace("plus", "+").replace("moins", "-").replace("fois", "*").replace("multipli√© par", "*").replace("divis√© par", "/")
        
        # Chercher une expression math√©matique
        math_pattern = r'(\d+(?:\.\d+)?)\s*([+\-*/])\s*(\d+(?:\.\d+)?)'
        match = re.search(math_pattern, text_clean)
        
        if match:
            try:
                num1 = float(match.group(1))
                operator = match.group(2)
                num2 = float(match.group(3))
                
                if operator == '+':
                    result = num1 + num2
                elif operator == '-':
                    result = num1 - num2
                elif operator == '*':
                    result = num1 * num2
                elif operator == '/':
                    if num2 != 0:
                        result = num1 / num2
                    else:
                        return "‚ùå Erreur : Division par z√©ro impossible !"
                
                # Formater le r√©sultat
                if result.is_integer():
                    result = int(result)
                
                return f"üßÆ {num1} {operator} {num2} = {result}"
                
            except:
                return "‚ùå Erreur dans le calcul. Essayez un format comme '25 + 17' ou '8 * 9'"
        else:
            return ("üßÆ Je peux faire des calculs ! Essayez par exemple :\n"
                   "‚Ä¢ 'nina calcule 25 + 17'\n"
                   "‚Ä¢ 'combien fait 8 * 9'\n"
                   "‚Ä¢ '15 - 3'\n"
                   "‚Ä¢ '100 / 4'")
    
    def show_help(self):
        """Afficher l'aide"""
        return (
            "ü§ñ AIDE - Nina (mode texte)\n"
            "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            "Commandes disponibles :\n"
            "‚Ä¢ 'nina [question]' - Poser une question\n"
            "‚Ä¢ 'nina bonjour' - Me saluer\n"
            "‚Ä¢ 'nina quelle heure' - Conna√Ætre l'heure\n"
            "‚Ä¢ 'nina qui es-tu' - En savoir plus sur moi\n"
            "‚Ä¢ 'nina test' - V√©rifier que je fonctionne\n"
            "‚Ä¢ 'nina aide' - Afficher cette aide\n"
            "‚Ä¢ 'nina stop' - Me fermer\n"
            "\n"
            "Exemples de questions :\n"
            "‚Ä¢ 'nina raconte-moi une blague'\n"
            "‚Ä¢ 'nina quel est le sens de la vie'\n"
            "‚Ä¢ 'nina conseils pour √™tre productif'\n"
            "\n"
            "üí° Astuce: Pas besoin de toujours dire 'nina' au d√©but !"
        )
    
    def detect_wake_word(self, text):
        """D√©tecter le mot de r√©veil ou permettre conversation libre"""
        text_lower = text.lower()
        
        # Commandes sp√©ciales sans wake word
        if text_lower in ["aide", "help", "stop", "quit", "exit"]:
            return True
            
        # Wake word classique
        return self.wake_word.lower() in text_lower
    
    def log_conversation(self, user_input, ai_response):
        """Enregistrer la conversation"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Sauvegarder dans l'historique (version courte)
        self.conversation_history.append(f"User: {user_input[:50]} | Nina: {ai_response[:50]}")
        
        # Limiter l'historique
        if len(self.conversation_history) > 10:
            self.conversation_history.pop(0)
        
        # Enregistrer dans un fichier log
        try:
            with open("logs/conversation_text.log", "a", encoding="utf-8") as f:
                f.write(f"{timestamp} - USER: {user_input}\n")
                f.write(f"{timestamp} - NINA: {ai_response}\n")
                f.write("-" * 50 + "\n")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur de log: {e}")
    
    def run(self):
        """Boucle principale de conversation"""
        print("\n" + "="*50)
        print("üöÄ Nina (mode texte) est en fonctionnement !")
        print("üí¨ Commencez √† taper vos messages...")
        print("="*50 + "\n")
        
        conversation_count = 0
        
        while True:
            try:
                # Demander l'entr√©e utilisateur
                user_input = input("üë§ Vous: ").strip()
                
                if not user_input:
                    continue
                
                # Commandes sp√©ciales
                if user_input.lower() in ["stop", "quit", "exit", "nina stop"]:
                    response = "Au revoir ! Nina s'arr√™te. √Ä bient√¥t ! üëã"
                    print(f"ü§ñ Nina: {response}")
                    break
                
                if user_input.lower() in ["aide", "help"]:
                    response = self.show_help()
                    print(f"ü§ñ Nina:\n{response}")
                    continue
                
                # V√©rifier le wake word ou permettre conversation libre
                if self.detect_wake_word(user_input) or conversation_count > 0:
                    # Traiter la commande
                    response = self.process_command(user_input)
                    print(f"ü§ñ Nina: {response}")
                    
                    # Enregistrer la conversation
                    self.log_conversation(user_input, response)
                    
                    conversation_count += 1
                    
                    # Encouragements
                    if conversation_count == 1:
                        print("\nüí° Parfait ! Vous pouvez continuer √† poser des questions librement.")
                        print("   (Plus besoin de dire 'nina' √† chaque fois maintenant)\n")
                else:
                    print("ü§ñ Nina: Dites 'nina' suivi de votre question pour commencer, ou tapez 'aide' pour voir les commandes.")
                
            except KeyboardInterrupt:
                print("\nüëã Nina s'arr√™te (Ctrl+C d√©tect√©). √Ä bient√¥t !")
                break
            except Exception as e:
                print(f"‚ùå Erreur inattendue: {e}")
                continue

# Point d'entr√©e
if __name__ == "__main__":
    try:
        nina = NinaText()
        nina.run()
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        input("Appuyez sur Entr√©e pour quitter...")
        sys.exit(1) 